package es.uabcs.servidor;

import java.rmi.RemoteException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;

import es.uabcs.bd.Select;
import es.uabcs.bd.Usuarios;
import es.uabcs.commod.*;

public class Servidor implements IServidor{
	
	Conexion conexion = new Conexion();
    Connection cn = null;
    Statement stm = null;
    ResultSet rs = null;
	
	private Map<Integer, String> sesion_nombre= new HashMap<Integer, String>();
	private Map<String, Integer> nombre_sesion= new HashMap<String, Integer>();
	private Map<Integer, List<Integer>> contactos= new HashMap<Integer, List<Integer>>();
	private Map<Integer, List<Mensaje>> buffer= new HashMap<Integer, List<Mensaje>>();
	
	
	
	@Override
	public int autenticar(String nombre) {
		int sesionUsuario=getSesion();
		
		sesion_nombre.put(sesionUsuario, nombre);
		nombre_sesion.put(nombre,sesionUsuario);
		
		return sesionUsuario;
	}
	
	@Override
	public int agregar(String nombre, int sesion) {
		if(!sesion_nombre.containsKey(sesion)) {
			throw new RuntimeException("Sesion invalida");
		}
		
		if(!nombre_sesion.containsKey(nombre)) {
			throw new RuntimeException(nombre+" no esta conectado");
		}
		
		List<Integer> misContactos= contactos.get(sesion);
		if(misContactos==null) {
			misContactos= new LinkedList<Integer>();
			contactos.put(sesion, misContactos);
		}
		
		misContactos.add(nombre_sesion.get(nombre));
		 return nombre_sesion.get(nombre);
	}
	
	@Override
	public void enviar (String mensaje, int sesionDe, int sesionA) {
		if(!sesion_nombre.containsKey(sesionDe)) {
			throw new RuntimeException("Sesion invalida");
		}
		
		if(!sesion_nombre.containsKey(sesionA)) {
			throw new RuntimeException("Contacto no conectado");
		}
		
		if(!contactos.get(sesionDe).contains(sesionA)) {
			throw new RuntimeException(sesion_nombre.get(sesionA)+ "No es parte de sus contactos");
		}
		
		List<Mensaje> mensajes= buffer.get(sesionA);
		
		if(mensajes == null) {
			mensajes = new LinkedList<Mensaje>();
			buffer.put(sesionA,mensajes);
		}
		
		mensajes.add(new Mensaje(mensaje,sesion_nombre.get(sesionDe)));
		
	}
	
	@Override
	public List<Mensaje> recibir(int sesion){
		
		if(sesion_nombre.containsKey(sesion)) {
			throw new RuntimeException("Sesion invalida");
		}
		return buffer.get(sesion);
	}
	
	@Override
	public void limpiarBuffer(int sesion) throws RemoteException {
		// TODO Auto-generated method stub
		if(sesion_nombre.containsKey(sesion)) {
			throw new RuntimeException("Sesion invalida");
		}
		
		buffer.get(sesion).clear();
		
	}
	
	@Override
	  public int suma(int uno, int dos) throws RemoteException {
	    // TODO Auto-generated method stub
	    return uno + dos;
	  }
	
	@Override
	public Usuarios login(String nom, String passwor) throws RemoteException {
		// TODO Auto-generated method stub
		System.out.println("sin problemas 1");
		Select s= new Select();
		System.out.println("sin problemas2");
		return s.selectU(nombre, contrasena);
		int id;
		String nombre;
		String password;
		
		try {
            cn = conexion.conectar();
            stm = cn.createStatement();
            rs = stm.executeQuery("SELECT id,nombre,password FROM usuarios WHERE nombre= '"+nom+"' AND password='"+passwor+"'");
            System.out.println("sin problemas3");
           
                id = rs.getInt(1);
                nombre = rs.getString(2);
                password = rs.getString(3); 
                U=new Usuarios(id, nombre, password);
                
                System.out.println("sin problemas4");
            
        } catch (SQLException e) {
            e.printStackTrace();
            
        } finally {
            try {
                if (rs!= null) {
                    rs.close();
                }
                
                if (stm != null) {
                    stm.close();
                }
                
                if (cn != null) {
                    cn.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

		return U;
	}
	}
	
	private static int sesion = new Random().nextInt();
	
	public static int getSesion() {
		return ++sesion;
	}

	

	

	
			
}
